apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ai-chatbot.fullname" . }}
  namespace: {{ .Values.namespace | default .Release.Namespace }}
  labels:
    {{- include "ai-chatbot.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "ai-chatbot.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "ai-chatbot.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ include "ai-chatbot.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ .Values.configMap.name }}
            - secretRef:
                name: {{ .Values.secret.name }}
          ports:
            - containerPort: {{ .Values.service.targetPort }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      initContainers:
        - name: wait-for-postgres
          image: postgres:16
          command: ['sh', '-c', 'until pg_isready -h {{ .Values.postgres.serviceName }} -p {{ .Values.postgres.service.port }}; do sleep 2; done']
        - name: wait-for-redis
          image: redis:7
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: REDIS_PASSWORD
          command:
            - sh
            - -c
            - |
              until redis-cli -h {{ .Values.redis.serviceName }} -p {{ .Values.redis.service.port }} -a "$REDIS_PASSWORD" ping | grep PONG; do sleep 2; done
